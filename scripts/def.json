[
  {
    "name": "addProp",
    "category": "Object",
    "description": "<p>Add a new property to an object.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.addProp(obj, prop, value)\n",
        "category": "Object",
        "example": "R.addProp({ firstName: 'john' }, 'lastName', 'doe') // => {firstName: 'john', lastName: 'doe'}\n",
        "args": [
          {
            "name": "obj",
            "description": "the target object"
          },
          {
            "name": "prop",
            "description": "the property name"
          },
          {
            "name": "value",
            "description": "the property value"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.addProp(obj, prop, value)\n",
        "category": "Object",
        "example": "R.addProp('lastName', 'doe')({ firstName: 'john' }) // => {firstName: 'john', lastName: 'doe'}\n",
        "args": [
          {
            "name": "prop",
            "description": "the property name"
          },
          {
            "name": "value",
            "description": "the property value"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "anyPass",
    "category": "Array",
    "description": "<p>Determines whether any predicate returns true for the input data.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.anyPass(data, fns)\n",
        "category": "Array",
        "example": "const isDivisibleBy3 = (x: number = x % 3 === 0)\nconst isDivisibleBy4 = (x: number = x % 4 === 0)\nconst fns = [isDivisibleBy3, isDivisibleBy4]\nR.anyPass(8, fns) // => true\nR.anyPass(11, fns) // => false\n",
        "args": [
          {
            "name": "data",
            "description": "The input data for predicates."
          },
          {
            "name": "fns",
            "description": "The list of predicates."
          }
        ],
        "returns": {
          "name": "boolean",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.anyPass(fns)(data)\n",
        "category": "Array",
        "example": "const isDivisibleBy3 = (x: number = x % 3 === 0)\nconst isDivisibleBy4 = (x: number = x % 4 === 0)\nconst fns = [isDivisibleBy3, isDivisibleBy4]\nR.anyPass(fns)(8) // => true\nR.anyPass(fns)(11) // => false\n",
        "args": [
          {
            "name": "fns",
            "description": "The list of predicates."
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "chunk",
    "category": "Array",
    "description": "<p>Split an array into groups the length of <code>size</code>. If <code>array</code> can&#39;t be split evenly, the final chunk will be the remaining elements.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.chunk(array, size)\n",
        "category": "Array",
        "example": "R.chunk(['a', 'b', 'c', 'd'], 2) // => [['a', 'b'], ['c', 'd']]\nR.chunk(['a', 'b', 'c', 'd'], 3) // => [['a', 'b', 'c'], ['d']]\n",
        "args": [
          {
            "name": "array",
            "description": "the array"
          },
          {
            "name": "size",
            "description": "the length of the chunk"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.chunk(size)(array)\n",
        "category": "Array",
        "example": "R.chunk(2)(['a', 'b', 'c', 'd']) // => [['a', 'b'], ['c', 'd']]\nR.chunk(3)(['a', 'b', 'c', 'd']) // => [['a', 'b', 'c'], ['d']]\n",
        "args": [
          {
            "name": "size",
            "description": "the length of the chunk"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "clamp",
    "category": "Number",
    "description": "<p>Clamp the given value within the inclusive min and max bounds.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.clamp(value, { min, max })\n",
        "category": "Number",
        "example": "clamp(10, { min: 20 }) // => 20\nclamp(10, { max: 5 }) // => 5\nclamp(10, { max: 20, min: 5 }) // => 10\n",
        "args": [
          {
            "name": "value",
            "description": "the number"
          },
          {
            "name": "limits",
            "description": "the bounds limits"
          }
        ],
        "returns": {
          "name": "number",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.clamp({ min, max })(value)\n",
        "category": "Number",
        "example": "clamp({ min: 20 })(10) // => 20\nclamp({ max: 5 })(10) // => 5\nclamp({ max: 20, min: 5 })(10) // => 10\n",
        "args": [
          {
            "name": "limits",
            "description": "the bounds limits"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "clone",
    "category": "Object",
    "description": "<p>Creates a deep copy of the value. Supported types: <code>Array</code>, <code>Object</code>, <code>Number</code>, <code>String</code>, <code>Boolean</code>, <code>Date</code>, <code>RegExp</code>. Functions are assigned by reference rather than copied.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.clone(value)\n",
        "category": "Object",
        "example": "R.clone({ foo: 'bar' }) // {foo: 'bar'}\n",
        "args": [
          {
            "name": "value",
            "description": "the object to clone"
          }
        ],
        "returns": {
          "name": "any",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "compact",
    "category": "Array",
    "description": "<p>Filter out all falsey values. The values <code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, and <code>NaN</code> are falsey.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.compact(array)\n",
        "category": "Array",
        "example": "R.compact([0, 1, false, 2, '', 3]) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "items",
            "description": "the array to compact"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "concat",
    "category": "Array",
    "description": "<p>Combines two arrays.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.concat(arr1, arr2)\n",
        "category": "Array",
        "example": "R.concat([1, 2, 3], ['a']) // [1, 2, 3, 'a']\n",
        "args": [
          {
            "name": "arr1",
            "description": "the first array"
          },
          {
            "name": "arr2",
            "description": "the second array"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.concat(arr2)(arr1)\n",
        "category": "Array",
        "example": "R.concat(['a'])([1, 2, 3]) // [1, 2, 3, 'a']\n",
        "args": [
          {
            "name": "arr2",
            "description": "the second array"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "createPipe",
    "category": "Function",
    "description": "<p>Creates a data-last pipe function. First function must be always annotated. Other functions are automatically inferred.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.createPipe(op1, op2, op3)(data)\n",
        "category": "Function",
        "example": "R.createPipe((x: number) => x * 2, x => x * 3)(1) // => 6\n",
        "args": [
          {
            "name": "op1"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "difference",
    "category": "Array",
    "description": "<p>Excludes the values from <code>other</code> array.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.difference(array, other)\n",
        "category": "Array",
        "example": "R.difference([1, 2, 3, 4], [2, 5, 3]) // => [1, 4]\n",
        "args": [
          {
            "name": "array",
            "description": "the source array"
          },
          {
            "name": "other",
            "description": "the values to exclude"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.difference(other)(array)\n",
        "category": "Array",
        "example": "R.difference([2, 5, 3])([1, 2, 3, 4]) // => [1, 4]\n",
        "args": [
          {
            "name": "other",
            "description": "the values to exclude"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "dropLast",
    "category": "Array",
    "description": "<p>Removes last <code>n</code> elements from the <code>array</code>.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.dropLast(array, n)\n",
        "category": "Array",
        "example": "R.dropLast([1, 2, 3, 4, 5], 2) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "array",
            "description": "the target array"
          },
          {
            "name": "n",
            "description": "the number of elements to skip"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.dropLast(n)(array)\n",
        "category": "Array",
        "example": "R.dropLast(2)([1, 2, 3, 4, 5]) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "n",
            "description": "the number of elements to skip"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "equals",
    "category": "Array",
    "description": "<p>Returns true if its arguments are equivalent, false otherwise.<br>NOTE: Doesn&#39;t handle cyclical data structures.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.equals(a, b)\n",
        "category": "Array",
        "example": "R.equals(1, 1) //=> true\nR.equals(1, '1') //=> false\nR.equals([1, 2, 3], [1, 2, 3]) //=> true\n",
        "args": [
          {
            "name": "a",
            "description": "the first object to compare"
          },
          {
            "name": "b",
            "description": "the second object to compare"
          }
        ],
        "returns": {
          "name": "boolean",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.equals(b)(a)\n",
        "category": "Array",
        "example": "R.equals(1)(1) //=> true\nR.equals('1')(1) //=> false\nR.equals([1, 2, 3])([1, 2, 3]) //=> true\n",
        "args": [
          {
            "name": "a",
            "description": "the first object to compare"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "filter",
    "category": "Array",
    "description": "<p>Filter the elements of an array that meet the condition specified in a callback function.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.filter(array, fn)\n",
        "category": "Array",
        "example": "R.filter([1, 2, 3], x => x % 2 === 1) // => [1, 3]\n",
        "args": [
          {
            "name": "items",
            "description": "The array to filter."
          },
          {
            "name": "fn",
            "description": "the callback function."
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.filter(fn)(array)\n",
        "category": "Array",
        "example": "R.filter(x => x % 2 === 1)([1, 2, 3]) // => [1, 3]\n",
        "args": [
          {
            "name": "fn",
            "description": "the callback function."
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "find",
    "category": "Array",
    "description": "<p>Returns the value of the first element in the array where predicate is true, and undefined otherwise.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.find(items, fn)\n",
        "category": "Array",
        "example": "R.find([1, 3, 4, 6], n => n % 2 === 0) // => 4\n",
        "args": [
          {
            "name": "array"
          },
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.find(fn)(items)\n",
        "category": "Array",
        "example": "R.pipe(\n  [1, 3, 4, 6],\n  R.find(n => n % 2 === 0)\n) // => 4\n",
        "args": [
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "findIndex",
    "category": "Array",
    "description": "<p>Returns the index of the first element in the array where predicate is true, and -1 otherwise.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.findIndex(items, fn)\n",
        "category": "Array",
        "example": "R.findIndex([1, 3, 4, 6], n => n % 2 === 0) // => 2\n",
        "args": [
          {
            "name": "array"
          },
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "number",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.findIndex(fn)(items)\n",
        "category": "Array",
        "example": "R.pipe(\n  [1, 3, 4, 6],\n  R.findIndex(n => n % 2 === 0)\n) // => 4\n",
        "args": [
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "flatMap",
    "category": "Array",
    "description": "<p>Map each element of an array using a defined callback function and flatten the mapped result.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.flatMap(array, fn)\n",
        "category": "Array",
        "example": "R.flatMap([1, 2, 3], x => [x, x * 10]) // => [1, 10, 2, 20, 3, 30]\n",
        "args": [
          {
            "name": "array",
            "description": "The array to map."
          },
          {
            "name": "fn",
            "description": "The function mapper."
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.flatMap(fn)(array)\n",
        "category": "Array",
        "example": "R.flatMap(x => [x, x * 10])([1, 2, 3]) // => [1, 10, 2, 20, 3, 30]\n",
        "args": [
          {
            "name": "fn",
            "description": "The function mapper."
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "flatten",
    "category": "Array",
    "description": "<p>Flattens <code>array</code> a single level deep.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.flatten(array)\n",
        "category": "Array",
        "example": "flatten([[1, 2], [3], [4, 5]]) // => [1, 2, 3, 4, 5]\n",
        "args": [
          {
            "name": "items",
            "description": "the target array"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "flattenDeep",
    "category": "Array",
    "description": "<p>Recursively flattens <code>array</code>.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.flattenDeep(array)\n",
        "category": "Array",
        "example": "R.flattenDeep([[1, 2], [[3], [4, 5]]]) // => [1, 2, 3, 4, 5]\n",
        "args": [
          {
            "name": "items",
            "description": "the target array"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "groupBy",
    "category": "Array",
    "description": "<p>Splits a collection into sets, grouped by the result of running each value through <code>fn</code>.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.groupBy(array, fn)\n",
        "category": "Array",
        "example": "R.groupBy(['one', 'two', 'three'], x => x.length) // => {3: ['one', 'two'], 5: ['three']}\n",
        "args": [
          {
            "name": "items",
            "description": "the items to group"
          },
          {
            "name": "fn"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.groupBy(array, fn)\n",
        "category": "Array",
        "example": "R.pipe(\n  ['one', 'two', 'three'],\n  R.groupBy(x => x.length)\n) // => {3: ['one', 'two'], 5: ['three']}\n",
        "args": [
          {
            "name": "fn"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "indexBy",
    "category": "Array",
    "description": "<p>Converts a list of objects into an object indexing the objects by the given key.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.indexBy(array, fn)\n",
        "category": "Array",
        "example": "R.groupBy(['one', 'two', 'three'], x => x.length) // => {3: 'two', 5: 'three'}\n",
        "args": [
          {
            "name": "array",
            "description": "the array"
          },
          {
            "name": "fn",
            "description": "the indexing function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.indexBy(fn)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  ['one', 'two', 'three'],\n  R.groupBy(x => x.length)\n) // => {3: 'two', 5: 'three'}\n",
        "args": [
          {
            "name": "fn",
            "description": "the indexing function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "intersection",
    "category": "Array",
    "description": "<p>Returns a list of elements that exist in both array.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.intersection(source, other)\n",
        "category": "Array",
        "example": "R.intersection([1, 2, 3], [2, 3, 5]) // => [2, 3]\n",
        "args": [
          {
            "name": "source",
            "description": "the first array"
          },
          {
            "name": "other",
            "description": "the second array"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "last",
    "category": "array",
    "description": "<p>Gets the last element of <code>array</code>.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.last(array)\n",
        "category": "array",
        "example": "R.last([1, 2, 3]) // => 3\nR.last([]) // => undefined\n",
        "args": [
          {
            "name": "array",
            "description": "the array"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "map",
    "category": "Array",
    "description": "<p>Map each element of an array using a defined callback function.<br>Indexed version is supported.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.map(array, fn)\nR.map.indexed(array, fn)\n",
        "category": "Array",
        "example": "R.map([1, 2, 3], x => x * 2) // => [2, 4, 6]\nR.map.indexed([0, 0, 0], (x, i) => i) // => [0, 1, 2]\n",
        "args": [
          {
            "name": "array",
            "description": "The array to map."
          },
          {
            "name": "fn",
            "description": "The function mapper."
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.map(fn)(array)\nR.map.indexed(fn)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  [0, 1, 2],\n  R.map(x => x * 2)\n) // => [2, 4, 6]\nR.pipe(\n  [0, 0, 0],\n  R.map.indexed((x, i) => i)\n) // => [0, 1, 2]\n",
        "args": [
          {
            "name": "fn",
            "description": "the function mapper"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "mapKeys",
    "category": "Object",
    "description": "<p>Maps keys of <code>object</code> and keeps the same values.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.mapKeys(object, fn)\n",
        "category": "Object",
        "example": "R.mapKeys({ a: 1, b: 2 }, (key, value) => key + value) // => { a1: 1, b2: 2 }\n",
        "args": [
          {
            "name": "object",
            "description": "the object to map"
          },
          {
            "name": "fn",
            "description": "the mapping function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.mapKeys(fn)(object)\n",
        "category": "Object",
        "example": "R.pipe(\n  { a: 1, b: 2 },\n  R.mapKeys((key, value) => key + value)\n) // => { a1: 1, b2: 2 }\n",
        "args": [
          {
            "name": "fn",
            "description": "the mapping function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "merge",
    "category": "Object",
    "description": "<p>Merges two objects. The same as <code>Object.assign</code>.<br><code>b</code> object will override properties of <code>a</code>.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.merge(a, b)\n",
        "category": "Object",
        "example": "R.merge({ x: 1, y: 2 }, { y: 10, z: 2 }) // => { x: 1, y: 10, z: 2 }\n",
        "args": [
          {
            "name": "a",
            "description": "the first object"
          },
          {
            "name": "b",
            "description": "the second object"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.merge(b)(a)\n",
        "category": "Object",
        "example": "R.merge({ y: 10, z: 2 })({ x: 1, y: 2 }) // => { x: 1, y: 10, z: 2 }\n",
        "args": [
          {
            "name": "b",
            "description": "the second object"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "mergeAll",
    "category": "Array",
    "description": "<p>Merges a list of objects into a single object.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.mergeAll(objects)\n",
        "category": "Array",
        "example": "R.mergeAll([{ a: 1, b: 1 }, { b: 2, c: 3 }, { d: 10 }]) // => { a: 1, b: 2, c: 3, d: 10 }\n",
        "args": [
          {
            "name": "array",
            "description": "the array of objects"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "noop",
    "category": "Function",
    "description": "<p>A function that returns always <code>undefined</code>.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.noop()\n",
        "category": "Function",
        "example": "onSomething(R.noop)\n",
        "args": [],
        "returns": {
          "name": "any",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "objOf",
    "category": "Object",
    "description": "<p>Creates an object containing a single <code>key:value</code> pair.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.objOf(value, key)\n",
        "category": "Object",
        "example": "R.objOf(10, 'a') // => { a: 10 }\n",
        "args": [
          {
            "name": "value",
            "description": "the object value"
          },
          {
            "name": "key",
            "description": "the property name"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": null,
        "signature": "R.objOf(key)(value)\n",
        "category": "Object",
        "example": "R.pipe(\n  10,\n  R.objOf('a')\n) // => { a: 10 }\n",
        "args": [
          {
            "name": "key",
            "description": "the property name"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "omit",
    "category": "Object",
    "description": "<p>Returns a partial copy of an object omitting the keys specified.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.omit(obj, names)\n",
        "category": "Object",
        "example": "R.omit({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { b: 2, c: 3 }\n",
        "args": [
          {
            "name": "object",
            "description": "the object"
          },
          {
            "name": "names",
            "description": "the property names"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.omit(names)(obj)\n",
        "category": "Object",
        "example": "R.pipe(\n  { a: 1, b: 2, c: 3, d: 4 },\n  R.omit(['a', 'd'])\n) // => { b: 2, c: 3 }\n",
        "args": [
          {
            "name": "names",
            "description": "the property names"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "once",
    "category": "Function",
    "description": "<p>Creates a function that is restricted to invoking <code>func</code> once. Repeat calls to the function return the value of the first invocation.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.once(fn)\n",
        "category": "Function",
        "example": "const initialize = _.once(createApplication)\ninitialize()\ninitialize()\n// => `createApplication` is invoked once\n",
        "args": [
          {
            "name": "fn",
            "description": "the function to wrap"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "pathOr",
    "category": "Object",
    "description": "<p>Gets the value at <code>path</code> of <code>object</code>. If the resolved value is <code>undefined</code>, the <code>defaultValue</code> is returned in its place.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.pathOr(object, [propName], defaultValue)\n",
        "category": "Object",
        "example": "pathOr({ x: 10 }, ['y'], 2) // 2\npathOr({ y: 10 }, ['y'], 2) // 10\n",
        "args": [
          {
            "name": "object",
            "description": "the target object"
          },
          {
            "name": "path",
            "description": "the path of the property to get"
          },
          {
            "name": "defaultValue",
            "description": "the default value"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.pathOr([propName], defaultValue)(object)\n",
        "category": "Object",
        "example": "pipe(\n  { x: 10 },\n  pathOr(['y'], 2)\n) // 2\npipe(\n  { y: 10 },\n  pathOr(['y'], 2)\n) // 10\n",
        "args": [
          {
            "name": "path",
            "description": "the path of the property to get"
          },
          {
            "name": "defaultValue",
            "description": "the default value"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "pick",
    "category": "Object",
    "description": "<p>Creates an object composed of the picked <code>object</code> properties.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.pick(object, [prop1, prop2])\n",
        "category": "Object",
        "example": "R.pick({ a: 1, b: 2, c: 3, d: 4 }, ['a', 'd']) // => { a: 1, d: 4 }\n",
        "args": [
          {
            "name": "object",
            "description": "the target object"
          },
          {
            "name": "names",
            "description": "the properties names"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.pick([prop1, prop2])(object)\n",
        "category": "Object",
        "example": "R.pipe(\n  { a: 1, b: 2, c: 3, d: 4 },\n  R.pick(['a', 'd'])\n) // => { a: 1, d: 4 }\n",
        "args": [
          {
            "name": "names",
            "description": "the properties names"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "pipe",
    "category": "Function",
    "description": "<p>Perform left-to-right function composition.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.pipe(\n  data,\n  op1,\n  op2,\n  op3\n)\n",
        "category": "Function",
        "example": "R.pipe(\n  [1, 2, 3, 4],\n  R.map(x => x * 2),\n  arr => [arr[0] + arr[1], arr[2] + arr[3]]\n) // => [6, 14]\n",
        "args": [
          {
            "name": "value",
            "description": "The initial value."
          },
          {
            "name": "op1"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "prop",
    "category": "Object",
    "description": "<p>Gets the value of the given property.</p>\n",
    "methods": [
      {
        "tag": "Data Last",
        "signature": "R.prop(prop)(object)\n",
        "category": "Object",
        "example": "R.pipe(\n  { foo: 'bar' },\n  R.prop('foo')\n) // => 'bar'\n",
        "args": [
          {
            "name": "name",
            "description": "the property name"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "purry",
    "category": "Function",
    "description": "<p>Creates a function with <code>data-first</code> and <code>data-last</code> signatures.<br><code>purry</code> is a dynamic function and it&#39;s not type safe. It should be wrapped by a function that have proper typings.<br>Refer to the example below to see usage a correct usage.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.purry(fn, arguments)\n",
        "category": "Function",
        "example": "function _findIndex(array, fn) {\n  for (let i = 0; i < array.length; i++) {\n    if (fn(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// data-first\nfunction findIndex<T>(array: T[], fn: (item: T) => boolean): number;\n\n// data-last\nfunction findIndex<T>(fn: (item: T) => boolean): (array: T[]) => number;\n\nfunction findIndex() {\n  return R.purry(_findIndex, arguments);\n}",
        "args": [
          {
            "name": "fn",
            "description": "the function to purry."
          },
          {
            "name": "args",
            "description": "the arguments"
          }
        ],
        "returns": {
          "name": "any",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "randomString",
    "category": "String",
    "description": "<p>Random a non-cryptographic random string from characters a-zA-Z0-9.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "randomString(length)\n",
        "category": "String",
        "example": "randomString(5) // => aB92J\n",
        "args": [
          {
            "name": "length",
            "description": "the length of the random string"
          }
        ],
        "returns": {
          "name": "string",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "range",
    "category": "Array",
    "description": "<p>Returns a list of numbers from <code>start</code> (inclusive) to <code>end</code> (exclusive).</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "range(start, end)\n",
        "category": "Array",
        "example": "R.range(1, 5) // => [1, 2, 3, 4]\n",
        "args": [
          {
            "name": "start",
            "description": "the start number"
          },
          {
            "name": "end",
            "description": "the end number"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data First",
        "signature": "range(end)(start)\n",
        "category": "Array",
        "example": "R.range(5)(1) // => [1, 2, 3, 4]\n",
        "args": [
          {
            "name": "end",
            "description": "the end number"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "reduce",
    "category": "Array",
    "description": "<p>Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.reduce(items, fn, initialValue)\n",
        "category": "Array",
        "example": "R.reduce([1, 2, 3, 4, 5], (acc, x) => acc + x, 100) // => 115\n",
        "args": [
          {
            "name": "items"
          },
          {
            "name": "fn",
            "description": "the callback function"
          },
          {
            "name": "initialValue",
            "description": "the initial value to use as an accumulator value in the callback function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.reduce(fn, initialValue)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  [1, 2, 3, 4, 5],\n  R.reduce((acc, x) => acc + x, 100)\n) // => 115\n",
        "args": [
          {
            "name": "fn",
            "description": "the callback function"
          },
          {
            "name": "initialValue",
            "description": "the initial value to use as an accumulator value in the callback function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "reject",
    "category": "Array",
    "description": "<p>Reject the elements of an array that meet the condition specified in a callback function.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.reject(array, fn)\n",
        "category": "Array",
        "example": "R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]\n",
        "args": [
          {
            "name": "items",
            "description": "The array to filter."
          },
          {
            "name": "fn",
            "description": "the callback function."
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data First",
        "signature": "R.reject(array, fn)\n",
        "category": "Array",
        "example": "R.reject([1, 2, 3], x => x % 2 === 0) // => [1, 3]\n",
        "args": [
          {
            "name": "fn",
            "description": "the callback function."
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "set",
    "category": "Object",
    "description": "<p>Sets the <code>value</code> at <code>prop</code> of <code>object</code>.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.set(obj, prop, value)\n",
        "category": "Object",
        "example": "R.set({ a: 1 }, 'a', 2) // => { a: 2 }\n",
        "args": [
          {
            "name": "obj",
            "description": "the target method"
          },
          {
            "name": "prop",
            "description": "the property name"
          },
          {
            "name": "value",
            "description": "the value to set"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.set(prop, value)(obj)\n",
        "category": "Object",
        "example": "R.pipe(\n  { a: 1 },\n  R.set('a', 2)\n) // => { a: 2 }\n",
        "args": [
          {
            "name": "prop",
            "description": "the property name"
          },
          {
            "name": "value",
            "description": "the value to set"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "sort",
    "category": "Array",
    "description": "<p>Sorts an array. The comparator function should accept two values at a time and return a negative number if the first value is smaller, a positive number if it&#39;s larger, and zero if they are equal.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.sort(items, cmp)\n",
        "category": "Array",
        "example": "R.sort([4, 2, 7, 5], (a, b) => a - b) // => [2, 4, 5, 7]\n",
        "args": [
          {
            "name": "items",
            "description": "the array to sort"
          },
          {
            "name": "cmp",
            "description": "the comparator function"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.sort(cmp)(items)\n",
        "category": "Array",
        "example": "R.pipe(\n  [4, 2, 7, 5],\n  R.sort((a, b) => a - b)\n) // => [2, 4, 5, 7]\n",
        "args": [
          {
            "name": "cmp",
            "description": "the comparator function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "sortBy",
    "category": "Array",
    "description": "<p>Sorts the list according to the supplied function in ascending order.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.sortBy(array, fn)\n",
        "category": "Array",
        "example": "R.sortBy([{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }], x => x.a)\n// => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]\n",
        "args": [
          {
            "name": "array",
            "description": "the array to sort"
          },
          {
            "name": "fn",
            "description": "the mapping function"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.sortBy(fn)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  [{ a: 1 }, { a: 3 }, { a: 7 }, { a: 2 }],\n  R.sortBy(x => x.a)\n) // => [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 7 }]\n",
        "args": [
          {
            "name": "fn",
            "description": "the mapping function"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "splitAt",
    "category": "Array",
    "description": "<p>Splits a given array at a given index.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.splitAt(array, index)\n",
        "category": "Array",
        "example": "R.splitAt([1, 2, 3], 1) // => [[1], [2, 3]]\nR.splitAt([1, 2, 3, 4, 5], -1) // => [[1, 2, 3, 4], [5]]\n",
        "args": [
          {
            "name": "array",
            "description": "the array to split"
          },
          {
            "name": "index",
            "description": "the index to split at"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.splitAt(index)(array)\n",
        "category": "Array",
        "example": "R.splitAt(1)([1, 2, 3]) // => [[1], [2, 3]]\nR.splitAt(-1)([1, 2, 3, 4, 5]) // => [[1, 2, 3, 4], [5]]\n",
        "args": [
          {
            "name": "index",
            "description": "the index to split at"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "splitWhen",
    "category": "Array",
    "description": "<p>Splits a given array at an index where the given predicate returns true.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.splitWhen(array, fn)\n",
        "category": "Array",
        "example": "R.splitWhen([1, 2, 3], x => x === 2) // => [[1], [2, 3]]\n",
        "args": [
          {
            "name": "array",
            "description": "the array to split"
          },
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.splitWhen(fn)(array)\n",
        "category": "Array",
        "example": "R.splitWhen(x => x === 2)([1, 2, 3]) // => [[1], [2, 3]]\n",
        "args": [
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "take",
    "category": "Array",
    "description": "<p>Returns the first <code>n</code> elements of <code>array</code>.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.take(array, n)\n",
        "category": "Array",
        "example": "R.take([1, 2, 3, 4, 3, 2, 1], 3) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "array",
            "description": "the array"
          },
          {
            "name": "n",
            "description": "the number of elements to take"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.take(n)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  [1, 2, 3, 4, 3, 2, 1],\n  R.take(n)\n) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "n",
            "description": "the number of elements to take"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "takeWhile",
    "category": "Array",
    "description": "<p>Returns elements from the array until predicate returns false.</p>\n",
    "methods": [
      {
        "tag": "Data First",
        "signature": "R.takeWhile(array, fn)\n",
        "category": "Array",
        "example": "R.takeWhile([1, 2, 3, 4, 3, 2, 1], x => x !== 4) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "array",
            "description": "the array"
          },
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      },
      {
        "tag": "Data Last",
        "signature": "R.takeWhile(fn)(array)\n",
        "category": "Array",
        "example": "R.pipe(\n  [1, 2, 3, 4, 3, 2, 1],\n  R.takeWhile(x => x !== 4)\n) // => [1, 2, 3]\n",
        "args": [
          {
            "name": "fn",
            "description": "the predicate"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "toPairs",
    "category": "Object",
    "description": "<p>Returns an array of key/values of the enumerable properties of an object.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.toPairs(object)\n",
        "category": "Object",
        "example": "R.toPairs({ a: 1, b: 2, c: 3 }) // => [['a', 1], ['b', 2], ['c', 3]]\n",
        "args": [
          {
            "name": "object"
          }
        ],
        "returns": {
          "name": "Object",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "type",
    "category": "Type",
    "description": "<p>Gives a single-word string description of the (native) type of a value, returning such answers as &#39;Object&#39;, &#39;Number&#39;, &#39;Array&#39;, or &#39;Null&#39;. Does not attempt to distinguish user Object types any further, reporting them all as &#39;Object&#39;.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.type(obj)\n",
        "category": "Type",
        "example": "R.type({}) //=> \"Object\"\nR.type(1) //=> \"Number\"\nR.type(false) //=> \"Boolean\"\nR.type('s') //=> \"String\"\nR.type(null) //=> \"Null\"\nR.type([]) //=> \"Array\"\nR.type(/[A-z]/) //=> \"RegExp\"\nR.type(() => {}) //=> \"Function\"\nR.type(undefined) //=> \"Undefined\"\n",
        "args": [
          {
            "name": "val"
          }
        ],
        "returns": {
          "name": "any",
          "description": ""
        }
      }
    ]
  },
  {
    "name": "uniq",
    "category": "Array",
    "description": "<p>Returns a new array containing only one copy of each element in the original list.<br>Elements are compared by reference using Set.</p>\n",
    "methods": [
      {
        "tag": null,
        "signature": "R.uniq(array)\n",
        "category": "Array",
        "example": "R.uniq([1, 2, 2, 5, 1, 6, 7]) // => [1, 2, 5, 6, 7]\n",
        "args": [
          {
            "name": "array"
          }
        ],
        "returns": {
          "name": "Array",
          "description": ""
        }
      }
    ]
  }
]